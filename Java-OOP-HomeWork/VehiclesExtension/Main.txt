package VehiclesExtension;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        Map<String, Vehicle> vehicleMap = new LinkedHashMap<>();

        vehicleMap.put("Car", createVehicle(scanner.nextLine()));
        vehicleMap.put("Truck", createVehicle(scanner.nextLine()));

        Bus bus = createBus(scanner.nextLine());
        vehicleMap.put("Bus", bus);

        int n = Integer.parseInt(scanner.nextLine());

        while (n-- > 0) {

            String command = scanner.nextLine();
            String[] params = command.split("\\s+");
            double distance = Double.parseDouble(params[2]);

            if (command.contains("Drive") && command.contains("Bus")) {
                System.out.println(bus.driveWitPassengers(distance));
            } else if (command.contains("Drive")) {
                System.out.println(vehicleMap.get(params[1]).drive(distance));
            } else {
                try {
                    vehicleMap.get(params[1]).refuel(distance);
                } catch (IllegalArgumentException ex) {
                    System.out.println(ex.getMessage());
                }
            }
        }
        for (Vehicle vehicle : vehicleMap.values()) {
            System.out.println(vehicle.toString());
        }
    }

    private static Bus createBus(String input) {
        String[] tokens = input.split("\\s+");
        return new Bus(Double.parseDouble(tokens[1])
                , Double.parseDouble(tokens[2]), Double.parseDouble(tokens[3]));
    }

    private static Vehicle createVehicle(String input) {
        String[] tokens = input.split("\\s+");
        switch (tokens[0]) {
            case "Car":
                return new Car(Double.parseDouble(tokens[1])
                        , Double.parseDouble(tokens[2]), Double.parseDouble(tokens[3]));
            case "Truck":
                return new Truck(Double.parseDouble(tokens[1])
                        , Double.parseDouble(tokens[2]), Double.parseDouble(tokens[3]));
            case "Bus":
                return createBus(input);
            default:
                throw new IllegalArgumentException("Unknown Vehicle type for " + tokens[0]);
        }
    }
}
