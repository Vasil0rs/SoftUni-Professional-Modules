import java.util.*;
import java.util.stream.Collectors;

public class Bombs {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        ArrayDeque<Integer> effects = Arrays.stream(scanner.nextLine().split(", "))
                .map(Integer::parseInt)
                .collect(Collectors.toCollection(ArrayDeque::new));

        ArrayDeque<Integer> casings = new ArrayDeque<>();

        Arrays.stream(scanner.nextLine().split(", ")).mapToInt(Integer::parseInt)
                .forEach(casings::push);

        Map<Integer, String> bombs = new LinkedHashMap<>();
        bombs.put(40, "Datura Bombs");
        bombs.put(60, "Cherry Bombs");
        bombs.put(120, "Smoke Decoy Bombs");

        Map<String, Integer> bombsCreated = new TreeMap<>();
        bombsCreated.put("Datura Bombs", 0);
        bombsCreated.put("Cherry Bombs", 0);
        bombsCreated.put("Smoke Decoy Bombs", 0);

        while (!effects.isEmpty() && !casings.isEmpty()) {

            if (hasAllBomb(bombsCreated)) {
                break;
            }

            int effect = effects.peek();
            int casing = casings.pop();
            int sum = effect + casing;

            if (bombs.containsKey(sum)) {
                effects.poll();
                bombsCreated.put(bombs.get(sum), bombsCreated.get(bombs.get(sum)) + 1);
            } else {
                casings.push(casing - 5);
            }
        }
        if (hasAllBomb(bombsCreated)) {
            System.out.println("Bene! You have successfully filled the bomb pouch!");
        } else {
            System.out.println("You don't have enough materials to fill the bomb pouch.");
        }

        String effectsOutput = "Bomb Effects: "
                + (effects.isEmpty() ? "empty" :
                effects.stream().map(String::valueOf).collect(Collectors.joining(", ")));
        System.out.println(effectsOutput);

        String casingsOutput = "Bomb Casings: "
                + (casings.isEmpty() ? "empty" :
                casings.stream().map(String::valueOf).collect(Collectors.joining(", ")));
        System.out.println(casingsOutput);

        bombsCreated.entrySet()
                .forEach(e -> System.out.printf("%s: %d%n", e.getKey(), e.getValue()));

    }

    public static boolean hasAllBomb(Map<String, Integer> bombsCreated) {
        return bombsCreated.get("Datura Bombs") >= 3 &&
                bombsCreated.get("Cherry Bombs") >= 3 &&
                bombsCreated.get("Smoke Decoy Bombs") >= 3;
    }

}
