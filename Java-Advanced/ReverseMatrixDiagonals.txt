import java.util.*;
import java.util.stream.Collectors;

public class ReverseMatrixDiagonals {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String [] dimension=scanner.nextLine().split("\\s+");
        int rows=Integer.parseInt(dimension[0]);
        int cols=Integer.parseInt(dimension[1]);
        int [][] matrix=new int[rows][cols];

        for (int row = 0; row < rows; row++) {
           matrix[row]= Arrays.stream(scanner.nextLine().split("\\s+"))
                   .mapToInt(Integer::parseInt).toArray();
        }

        Map<Integer,List<Integer>> diagonals= new LinkedHashMap<>();

        for (int group = 0, diagonal = 0, row = rows - 1; row >= 0; row--, diagonal = ++group) {
            for (int col = cols - 1; col >= 0 && col >= group; col--, diagonal++) {
                addDiagonal(diagonals, matrix[row][col], diagonal);
            }

            for (int r = rows - 1 - 1 - group; r >= 0 && group < cols; r--, diagonal++) {
                addDiagonal(diagonals, matrix[r][group], diagonal);
            }
        }

        final StringBuilder builder = new StringBuilder();

        diagonals.values().forEach(numbers -> builder
                .append(numbers.stream().map(Object::toString).collect(Collectors.joining(" ")))
                .append(System.lineSeparator()));

        System.out.print(builder);
    }

    private static void addDiagonal(Map<Integer, List<Integer>> diagonals, int value, int diagonal) {
        diagonals.putIfAbsent(diagonal, new ArrayList<>());
        diagonals.get(diagonal).add(value);
    }
}
