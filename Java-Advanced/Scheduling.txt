import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Scheduling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        ArrayDeque<Integer> stackTasks  = new ArrayDeque<>();

        Arrays.stream(scanner.nextLine().split(", ")).mapToInt(Integer::parseInt)
                .forEach(stackTasks::push);

        ArrayDeque<Integer> queueThreads  = Arrays.stream(scanner.nextLine().split(", "))
                .map(Integer::parseInt)
                .collect(Collectors.toCollection(ArrayDeque::new));
        int taskToKill = Integer.parseInt(scanner.nextLine());

        boolean isKilled = false;
        int threadKillTask = 0;

        while (!stackTasks.isEmpty() && !queueThreads.isEmpty()){

            if (stackTasks.peek() == taskToKill){
                isKilled = true;
                threadKillTask = queueThreads.peek();
                break;
            }

            if (queueThreads.peek() >= stackTasks.peek()){
                queueThreads.poll();
                stackTasks.pop();
            }else {
                queueThreads.poll();
            }
        }

        if (isKilled){
            System.out.printf("Thread with value %d killed task %d%n", threadKillTask, taskToKill);
            for (Integer queueThread : queueThreads) {
                System.out.print(queueThread + " ");
            }
        }
    }
}
